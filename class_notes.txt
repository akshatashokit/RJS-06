07-04-2021
==========
Note : both Framework and library containes predefined functionalities.

we should follow Rules & Regulations to use Framework

No Need to Follow Rules and Regulations to Use Library



Differnces Between Angular and ReactJS
======================================


		Angular						ReactJS


1) Initial Version of Angular Released			intial version Released in 2013.
   in 2010.

   Current Version is Angular11				current version is "17.x"



2) Angular Released by Google				ReactJS Released by Facebook.


3) Official Documentaion Available			Official Documentation Available
   with "angular.io"					with "react.org"


4) Angular is the Framework				React is the library



5) Angular Follows The Real DOM				React Follows The Virtual DOM


6) Angular Applications having less performance		React Applications are 10x faster
   Compared to React.					compared to Angular Applications.



7) HttpClient used to make the Rest API			no predefined support to make Rest
   calls						API calls

							need to depende on 3rd party libraries

							"axios"


8) RouterModule is the inbuild in Angular,		by default React won't supports
   used to implement the Single Page Applications	Single Page Applications

							"react-router-dom" library


9) Angular Provides the Validations Support		React won't Provides the Validations Support.



10) NgRX						Redux

							Saga

							Thunk




11) Angular follows the Two way				React follows the one way data binding
    Data Binding





NodeJS
======

	- NodeJS is the Running Environment to Execute JavaScript Based Servers.

	- By using NodeJS, we can build the Servers.

		Http Server

		TCP Server

	- we will build the Servers by using "JavaScript".

	- NodeJS is the Backend Technology.


	- NodeJS plays major Role to build MEAN Stack, MERN Stack and MEVN Stack Applications


	M	-      MongoDB

	E       -      ExpressJS

	A	-      Angular11		R	-       ReactJS		V - VueJS

	N 	- 	NodeJS



08-04-2021

Environmental Setup
====================

1) download and install NodeJS

    - "npm", "node" and "npx" are the tools present in NodeJS.  

    - "npm" stands for Node Packaging Manager.

    - "npx" stands for nod pckaging runner.

    - "npm" helps to install the React Software.

    - "npx" helps to create the React "Projects".

website : https://nodejs.org/en/download/

file    : node-v14.16.1-x64.msi


2) install yarn tool.


    yarn is the tool, provided by facebook.

    yarn tool, used to download the 3rd party libraries.

    Ex.
        axios

        react-router-dom

        redux

        saga

        thunk

        ---
        ---
        ---

    - we will install yarn tool by using following command.

   > npm install -g yarn

    "-g" stands for global installation.



3) install create-react-app


    - create-react-app is the tool provided by facebook.

    - create-react-app used to create the react applications.

    - we will install create-react-app tool, by using following command.

    > npm install -g create-react-app


4) install Visual Studio Code


    - Visual Studio Code is the IDE, provided by microsoft.

    - Visual Studio Code also called as VSCode.

    - VSCode is the open source IDE.

    - VSCode ide used to build the Angular,React,Vue,NodeJS,........

website : https://code.visualstudio.com/docs/?dv=win

file    : VSCodeUserSetup-x64-1.55.0.exe


                                creating the react application

1) create the react application with the following command.


    > npx create-react-app first-app --template typescript

        - where "first-app" is the name of the react application.


2) switch to react application

    > cd first-app

3) execute the react application

    > yarn start

    by default react application running on port no.3000




09-04-2021
===========

Directory Structure


1) node_modules

        - node_modules containes predefined libraries.

        - these libraries helps to execute the react application.

2) public / favicon.ico

        - This is default logo of ReactJS.

3) public / index.html

       - index.html file is the main template.

        - react starts the execution from "index.html" file.

        - main template containes "div" as main DOM Element whose id is "root"

        Ex.
                <div id="root"></div>





4) public/logo192.png
          logo512.png


        - PWA Stands for Progressive Web Apps.

        - Execution of web applications with minimum content without network.

        - above logos helps to implement the PWA in React Envirinment.


5) public/manifest.json

        - it is used to configure the mobile applications development.


6) public/robots.txt

      - it is used to write the rules and regulations.


7) src

     - used to deploy the components.


8) src / App.tsx
         App.css
         App.test.tsx

        - when ever we create the Project automatically "App" Component is the Default Component.

        - "App.css" file representing style sheet.

        - "App.test.tsx" file representing the test cases file.

9) src / index.tsx

    - This file acting as Registration file.

    - After Deployment of our components, we should register in index.tsx file.


10) src / index.css

    - used to define the global styles to Reacy Applications.


11) src/logo.svg

    - This is the default svg logo of ReactJS.






                            ***** Component ******

    - simple "typescript" class behaves like "component".

    - components simplifies the "complex" UI.

    - these components are "reusable".

    - we will save the typescript files with ".ts" or ".tsx" extension.

    - we will deploy components in "src" folder.

    - all the components we need to register in "index.tsx" file.

    - "index.tsx" file is the "registration" file.


************************************
component-app 
            src
              First.tsx

              index.tsx
            public
                index.html
*************************************


                                                    state
    -  "state" is the predefined object.

    - state object, used to represent the "component" data.

    - in general, we will declare state by using interfaces.


***********************************************
state-ex
       src
         StateEx1.tsx

         index.tsx

       public
         index.html
***********************************************


**************************************************
state-ex
       src
         StateEx2.tsx

         index.tsx

       public
         index.html
***************************************************


                                                props
    - props is the predefined object.

    - props, used to receive the data from another component.

************************************
props-app
        src
          Component1.tsx

          Component2.tsx

          index.tsx
        public
            index.html
*************************************   


*******************************************
props-app
        src
          Parent.tsx     (state)

          Child.tsx      (props)
*******************************************


********************************************
props-ex1
        src
          Parent.tsx

          Child.tsx

          Subchild.tsx

          index.tsx
********************************************



                                    child to parent communicaction
                                    ==============================


++++++++++++++++++++++++++++++++++++++++++++++++++++
childtoparent
            src
               Parent.tsx
               Child.tsx

               index.tsx
            public
                index.html
+++++++++++++++++++++++++++++++++++++++++++++++++++

create the Parent component




































































































                                        API Calls
                                        =========

    - axios is the 3rd party library, used to make the rest api calls.

    - we will download axios module, by using yarn tool.

    > yarn add axios --save

step 1.
    create the react application

    > npx create-react-app rest-api --template typescript


step 2.
    switch to project

    > cd rest-api

step 3.
    download axios module

    > yarn add axios --save


step 4.
    create the component.

    GetEx.tsx


                    Revision
                    =========
state
=====
    - component data, technically called as state.

    - state is the predefined "object" in "reactjs".

***************************************
revision-app
           src
             Example1.tsx

             index.tsx
****************************************


                                            ****** single page applications ******

        - loading "one component" to "another component" without "refreshing" the whole webpage called as "single page application".

        - "navigation" of one component to anorher component in single page applications called as "Routing".

        - "react-router-dom" is the library used to implement the single page applications.

        - we will download "react-router-dom" module by using "yarn" tool.

        > yarn add react-router-dom --save


steps to implement the single page applications
===============================================
1) create the react application

                   > npx create-react-app spa-app --template typescript


2) switch to react application

                  > cd spa-app


3) download the react-router-dom module

                > yarn add react-router-dom @types/react-router-dom --save

4) create the child components

**********************************************************
spa-app
      src
        screens
            HomeScreen.tsx

            ProductScreen.tsx

            CartScreen.tsx
**********************************************************


step 5.
    create the App Component.


            "App" Component behaves like "Parent Component" in "Single Page Applications".






###################################################################################################
spa-demo2
        src
          App.tsx

          screens
               Screen1.tsx
               Screen2.tsx
          index.tsx
####################################################################################################


                            Single Page Applications Revision


> cd spa-revision-app

> yarn add react-router-dom @types/react-router-dom --save


step 1.
    create the App Component







                                    State Management Ex
                                    -------------------

1) create the Directory

Ex.
    reduxEx

2) switch to reduxEx

    > cd reduxEx

3) download the redux library

    > yarn add redux --save

4) create the state menagement application

    Ex.
        Bank.js






                                                        Redux Example
                                                        =============

1) create the directory

    Ex.
            reduxEx1

2) switch to reduxEx1

    > cd reduxEx1

3) download redux library

        => yarn tool

                > yarn add redux --save

        => npm tool

                > npm install redux --save

        => package.json file

        package.json
        ============
        {
            "name":"AshokIT",
            "version":1.0.0,
            "dependencies":{
                "redux":"latest"
            }
        }

4) create the redux application

        Age.js


                                        MERN STACK
                                        ----------
1) create the mongodb database.

        - MongoDB database is NoSQL database (won't support SQL & PLSQL).

        - MongoDB database supports JSON (won't support tables).

        - MongoDB database is light weight database.

        - MongoDB database supports cloud Environment.

        - MongoDB database provides cloud Environment in the form of a "MongoDB Atlas".

            URL : https://account.mongodb.com/account/login

Comparision
-----------

SQL DataBases                                               NoSQL DataBases
--------------                                              ----------------

Ex.
1)
    Oracle                                                      MongoDB

    MySQL                                                       CassandraDB

    SQLServer


2) tables                                                   collections


3) DataBases                                                DataBases


4) primary key                                              _id


creating the MongoDB Atlas account   (cloud)
--------------------------------------------

Details
-------
DataBase Name : RJS-06

Collection Name : products

password : admin

Connection URL : mongodb+srv://admin:admin@cluster0.hz6xa.mongodb.net/RJS-06?retryWrites=true&w=majority 




                                                            ***** NodeJS *****

    - NodeJS is "server" side scripting language.

    - NodeJS, used to develop the "servers".

            Http Server

            TCP Server

    - we will develop "NodeJS" Applications by using "JavaScript".

    - NodeJS, supports libraries (modules).

    - we will download above libraries by using "yarn" tool.

    - all the libraries downloads to "node_modules" folder in current path.

modules
-------
1) express

    - express module, used to develop the rest services.

    Ex.
        GET
        POST
        PUT
        DELETE
        HEAD
        ---
        ---
        ---

2) mongodb

    - helps to connect to mongodb database.

3) body-parser

    - used to receive the data from client application

4) cors
    
    - used to enable the communication between different ports Available in application.


steps to create the "server"
============================

1) create directory

    Ex.
        server

2) switch to server folder

    > cd server

3) download the node modules.

    => express

    => body-parser

    => cors

    => mongodb

    > yarn add express body-parser cors mongodb --save


4) create the server file.

    Ex.
        server.js

5) start the node server

    > node server


6) test the following rest api call by using "Postman"

    => http://localhost:8080/products





                                            implement rest api by using nodejs 
                                            ----------------------------------

download the images   (p1.png to p6.png)

deploy into AWS Server   (cloud images)

store images path into "MongoDB" DataBase

develop the rest api by using "NodeJS"  (GET Request)

test the rest api by using "Postman"


Cloud Images path's
-------------------

=> https://rjs-06.s3.ap-south-1.amazonaws.com/p1.jpg

=> https://rjs-06.s3.ap-south-1.amazonaws.com/p2.jpg

=> https://rjs-06.s3.ap-south-1.amazonaws.com/p3.jpg

=> https://rjs-06.s3.ap-south-1.amazonaws.com/p4.jpg

=> https://rjs-06.s3.ap-south-1.amazonaws.com/p5.jpg

=> https://rjs-06.s3.ap-south-1.amazonaws.com/p6.jpg


*****************************************************************************************************************
database name       :   ecommerce

collection name     :   products

URL : mongodb+srv://admin:admin@cluster0.hz6xa.mongodb.net/ecommerce?retryWrites=true&w=majority
*****************************************************************************************************************


create the folder

Ex.
    rev_server

switch to rev_server folder

    > cd rev_server

download the node modules

    1) express
            - express used to develop the rest services

    2) cors
            - used to enable the ports communicaction

    3) mongodb
            - used to connect to mongodb database

    4) body-parser
            - used to receive the data from client application

    > yarn add express cors mongodb body-parser --save

develop the rest api by using nodejs

    server.js


start the node server

    > node server

test the rest api by using Postman

    => http://localhost:8080/products




                                    Redux Integration with Thunk

1) create the react application

2) add the libraries

3) modal

4) types

5) actions

6) reducer

7) store

8) component


step 1.
    create the react application

    > npx create-react-app redux-app --template typescript

    where "redux-app" is the name of the react application.


step 2.
    switch to react application

    > cd redux-app


step 3.
    download the libraries

        => redux @types/redux

        => react-redux @types/react-redux

        => redux-thunk @types/redux-thunk

        => axios @types/axios


        > yarn add redux @types/redux react-redux @types/react-redux redux-thunk @types/redux-thunk axios @types/axios --save



step 4.
    create the modal

    http://localhost:8080/products


    ************************************
    redux-app
            modal
                Product.tsx
    ************************************

    finally "Product" modal is ready

step 5.
    create the types  (plan sheet)


    ****************************************
    redux-app
            src
              types
                 ProductActionTypes.tsx
    ****************************************

    finally "ProductsActionTypes" are ready.

        => ProductsLoading

        => ProductsLoadingSuccess

        => ProductsLoadingFail

step 6.
    implement the actions

    ****************************************
    redux-app
           src
             actions
               ProductsActions.tsx
    ***************************************

step 7.
    create the reducer


    **************************************
    redux-app
            src
              reducerApp
                ProductsReducer.tsx
    **************************************

        finally "ProductReducer" is ready


step 8.
    create the store

    index.tsx

step 9.
    apply the "dispatch" and "subscription" from "" component





*********************************************
Thunk (Example)
*********************************************

URL : https://restcountries.eu/rest/v2/all


step 1.
    create the react application


> npx create-react-app countries-app --template typescript


step 2.
    switch to react application

    > cd countries-app

step 3.
    download node modules

    @redux             @types/redux

    @react-redux       @types/react-redux

    @redux-thunk       @types/redux-thunk

    @axios             @types/axios


    > yarn add redux @types/redux react-redux @types/react-redux redux-thunk @types/redux-thunk axios @types/axios --save


step 4.
    create the modal

***************************************************
countries-app
            src
              model
                Countries.tsx
***************************************************

    - finally "Country" model is ready.


step 5.
    create the types

**************************************************
countries-app
            src
              types 
                 CountriesTypes.tsx
**************************************************


    finally "CountriesTypes" ready with following plans.

    1) CountriesLoading

    2) CountriesLoadingSuccess

    3) CountriesLoadingFail


step 6.
    create the actions

*******************************************************
countries-app
           src
            actions
              ContriesActions.tsx
*******************************************************


step 7.
    create the reducer


********************************************************
countries-app
            src
              reducer
                CountriesReducer.tsx
*******************************************************

    finally "CountriesReducer" is ready.


step 8.
    create the store

    index.tsx

step 9.
    create the App component


                                ****** Login Authentication ******

1) create the login_tbl

    database_name : authentication

    table_name    : login_tbl

    connection_url : mongodb+srv://admin:admin@miniprojectdb.nzphu.mongodb.net/authentication?retryWrites=true&w=majority


2) create the login_server directory.

    Ex.
        login_server


3) switch to login_server

    > cd login_server


4) download the node modules

    => express

    => mongodb

    => body-parser

    => cors


    > yarn add express mongodb body-parer cors --save


5) develop the node application

    Ex.
        server.js


6) start the node server

    > node server


7) test the rest api call by using "Postman"

    > http://localhost:8080/login  (POST)

































































































    































































